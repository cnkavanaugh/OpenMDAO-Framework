[buildout]
# We can 'extend' another (could also be mutiple) buildout config file
# We could also supply URLs here to use remote configs
#extends = base.cfg

#log-level = DEBUG

develop = 
   ../openmdao.main
   ../openmdao.lib
   ../openmdao.recipes
   ../openmdao.util
   ../openmdao.test
   ../examples/openmdao.examples.engine_design
   ../examples/openmdao.examples.simple
   ../contrib/units

parts = 
   rec
   app
   licenses
   pylint
   wingsetup
   mod2egg
   sphinxbuild

# forces all eggs to be unzipped when installed
unzip = true

newest = false

# TODO: remove this an use only pypi + find_links
#index = http://torpedo.grc.nasa.gov:31001

# find-links can be used to download from the web or grab from a local directory
#find-links = file:///somedir/eggs/
find-links =  http://torpedo.grc.nasa.gov:31004

# put the name of a group where versions are specified here
versions = release

# this contains a list of specific versions
[release]
zc.recip.egg = 1.2.2
setuptools = 0.6c9
conmin = 1.0
Sphinx = 0.6.3
Pyevolve = 0.6
numpy = 1.3.0
pyparsing = 1.5.2
Traits = 3.2.0

[rec]
recipe = zc.recipe.egg:scripts
eggs = openmdao.recipes

[wingsetup]
recipe = openmdao.recipes:wingproj
eggs = ${app:eggs}
# wingpath is needed if wing is somewhere we don't expect
#wingpath = C:\Program Files\Wing IDE 3.2\bin\wing.exe

# This part will generate a file in docs/licenses/licenses_table.rst
# that contains a restructured text table with the name, license,
# and home-page of all distributions that [app] depends on. 
# The metatable recipe can be used to pull any metadata out of 
# dependent distributions.
[licenses]
recipe = openmdao.recipes:metatable
eggs = ${app:eggs}
meta_names = name
             license
             home-page
headers = **Eggs Used by OpenMDAO**
          **License**
          **Link**
data_templates = :term:`%s`
                 %s
                 %s
excludes = openmdao.*
outfile = ${buildout:directory}/../docs/licenses/licenses_table.txt

[app]
#recipe = zc.recipe.egg:scripts
recipe = openmdao.recipes:isolatedegg

# put all of the eggs that openmdao depends on here
eggs = 
       openmdao.main
       openmdao.lib
       openmdao.util
       openmdao.recipes
       openmdao.test
       openmdao.examples.engine_design
       openmdao.examples.simple
       units
       coverage

#relative-paths = true

# running the m4 examples require extra paths (some are site specific)
#extra-paths = ${buildout:directory}/../contrib
#              /usr/local/lib/python2.5/site-packages

# 'test' is an openmdao wrapper around nosetest that understands a command
# line arg of '--all' and a list of packages/dirs containing all openmdao
# tests. Otherwise it functions the same as nosetests.
scripts = openmdaotest=test
arguments = r'${buildout:parts-directory}/sphinxbuild/test_docs.py'

# custom python interpreter with all of the paths we need
interpreter = python

[sphinxbuild]
recipe = openmdao.recipes:sphinxbuild

# set this to false when doing frequent buildouts 
# and sphinx doc regeneration will be skipped
#build = false

# You can put a specific browser here. Otherwise, you get default for
# that platform.  Some available names (from webbrowser module docs) are:
# firefox
# opera
# windows-default
# macosx

#browser = firefox  

eggs = ${app:eggs}

# this specifies the packages to generate API docs for
packages = openmdao.main
           openmdao.lib
           openmdao.recipes
           openmdao.util

# this specified individual modules to generate API docs for
srcmods = scripts/dumpdistmeta.py


# The pylint example below shows one of the really cool
# features of buildout. You can create your own bin scripts
# that run a function you specify inside of an egg by
# creating your own entry points right here in the config
# file. The example below creates a bin/pylint script that
# runs pylint (from within its own egg via pkg_resources)
# with sys.path hard wired so it can see
# all of the eggs in our app. Note also that we're specifying
# the arguments that get passed to the pylint.lint.Run function.
[pylint]
#recipe = zc.recipe.egg
recipe = openmdao.recipes:isolatedegg
eggs = ${app:eggs}
       pylint
entry-points = pylint=pylint.lint:Run
arguments = sys.argv[1:]
# we need to specify only scripts that expect an arg of sys.argv[1:]
# below. Otherwise,
# this recipe will overwrite any console scripts found in 
# ${app:eggs} and supply them with an arg of sys.argv[1:],
# which we may not want.  The scripts attribute here limits
# the generated scripts to only those named in the scripts
# list.
scripts = pylint

# a module to egg conversion part
[mod2egg]
recipe = openmdao.recipes:isolatedegg
eggs = ${app:eggs}
scripts = mod2egg
arguments = sys.argv[1:]


